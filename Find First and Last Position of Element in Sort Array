int firstPosition(vector<int>& nums,int target)
{
    int n=nums.size();
    int s=0;
    int e=n-1;
    int res=-1;
    while(s<=e){
        int mid=s+(e-s)/2;
        if(nums[mid]==target){
            res=mid;
            e=mid-1;
        }
        else if(nums[mid]>target){
            e=mid-1;
        }
        else{
            s=mid+1;
        }
    }
    return res;
}

int lastPosition(vector<int>& nums,int target){
    int n=nums.size();
    int s=0;
    int e=n-1;
    int res=-1;
    while(s<=e)
    {
        int mid=s+(e-s)/2;
        if(nums[mid]==target){
            res=mid;
            s=mid+1;
        }
        else if(nums[mid]>target){
            e=mid-1;
        }
        else {
            s=mid+1;
       }
    }    
   return res;
}
class Solution {
public:
vector<int> searchRange(vector<int>& nums, int target) {
    vector<int> ans;
    int first=firstPosition(nums,target);
    int last=lastPosition(nums,target);
    ans.push_back(first);
    ans.push_back(last);
    return ans;
}
};
